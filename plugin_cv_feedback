<?php
/**
 * Plugin Name: CV Matcher (API UI)
 * Description: Front-end UI to query the CV Matcher API with weighted JD & extra fields and show per-field breakdown.
 * Version: 1.3.1
 * Author: Tim Kuijten
 */

if ( ! defined('ABSPATH') ) { exit; }

/**
 * CONFIG — set your API URL + secret
 */
define('CVM_API_BASE', 'https://cv-matcher-api-lyhr.onrender.com');   // <-- your API
define('CVM_API_URL',  CVM_API_BASE . '/match');
define('CVM_API_FOLDERS', CVM_API_BASE . '/folders');
define('CVM_API_KEY', '79fc470fd2103ce77407f6cb058cd6d2');            // <-- match env CV_API_KEY

// ------------------------------------
// Server-side proxy (keeps API key secret)
// ------------------------------------
add_action('rest_api_init', function () {
  register_rest_route('cv/v1', '/folders', [
    'methods' => 'GET',
    'callback' => 'cvm_proxy_folders',
    'permission_callback' => '__return_true'
  ]);
  register_rest_route('cv/v1', '/match', [
    'methods' => 'POST',
    'callback' => 'cvm_proxy_match',
    'permission_callback' => '__return_true'
  ]);
});

function cvm_proxy_folders() {
  $res = wp_remote_get(CVM_API_FOLDERS, [
    'timeout' => 30,
    'headers' => ['x-api-key' => CVM_API_KEY]
  ]);
  if (is_wp_error($res)) {
    return new WP_Error('api_error', $res->get_error_message(), ['status' => 502]);
  }
  $code = wp_remote_retrieve_response_code($res);
  $body = wp_remote_retrieve_body($res);
  if ($code >= 400) {
    return new WP_Error('api_error', $body, ['status' => $code]);
  }
  return rest_ensure_response(json_decode($body, true));
}

function cvm_proxy_match(WP_REST_Request $request) {
  $payload = $request->get_json_params();
  $res = wp_remote_post(CVM_API_URL, [
    'timeout' => 60,
    'headers' => [
      'Content-Type' => 'application/json',
      'x-api-key'    => CVM_API_KEY
    ],
    'body' => wp_json_encode($payload)
  ]);
  if (is_wp_error($res)) {
    return new WP_Error('api_error', $res->get_error_message(), ['status' => 502]);
  }
  $code = wp_remote_retrieve_response_code($res);
  $body = wp_remote_retrieve_body($res);
  if ($code >= 400) {
    $detail = json_decode($body, true);
    return new WP_Error('api_error', $detail['detail'] ?? $body, ['status' => $code]);
  }
  return rest_ensure_response(json_decode($body, true));
}

// ------------------------------------
// Shortcode UI
// ------------------------------------
add_shortcode('cv_matcher', function() {
  ob_start(); ?>
  <style>
    :root { --cvm-primary:#0A212E; --cvm-track:#e5e7eb; }

    .cvm-wrap{max-width:1100px;margin:0 auto;padding:16px}
    .cvm-grid{display:grid;grid-template-columns:1fr 1fr;gap:20px}
    .cvm-card{background:#fff;border:1px solid #e7e7e7;border-radius:12px;padding:16px;box-shadow:0 1px 2px rgba(0,0,0,.03)}
    .cvm-title{font-size:34px;font-weight:700;margin:0 0 12px}
    .cvm-badge{display:inline-flex;align-items:center;background:#eef7ff;border:1px solid #d6e9ff;border-radius:999px;padding:4px 10px;font-size:12px;color:var(--cvm-primary)}
    .cvm-label{font-weight:600;margin:0;display:block}
    .cvm-input, .cvm-select, .cvm-textarea{width:100%;box-sizing:border-box;border:1px solid #d9d9d9;border-radius:10px;padding:10px;font-size:14px}
    .cvm-textarea{min-height:120px;resize:vertical}
    /* Wider number column so decimals never clip */
    .cvm-row{display:grid;grid-template-columns:1fr 180px 70px;gap:8px;align-items:center}
    .cvm-num{width:100%; min-width:70px; text-align:right; padding-right:6px;}
    .cvm-btn{background:var(--cvm-primary);color:#fff;border:none;border-radius:10px;padding:10px 16px;font-weight:600;cursor:pointer}
    .cvm-result{border:1px solid #eee;border-radius:10px;padding:10px;margin-bottom:10px}
    .cvm-score{font-weight:700;font-size:18px}
    .cvm-chips{display:flex;flex-wrap:wrap;gap:6px;margin-top:8px}
    .cvm-chip{background:#f3f4f6;border:1px solid var(--cvm-primary);border-radius:999px;padding:2px 8px;font-size:12px}
    .cvm-bar{height:8px;background:var(--cvm-track);border-radius:999px;overflow:hidden}
    .cvm-bar > span{display:block;height:100%;background:var(--cvm-primary)}
    @media (max-width:900px){
      .cvm-grid{grid-template-columns:1fr}
      .cvm-row{grid-template-columns:1fr 1fr 110px}
    }

    /* --- Range slider styling --- */
    .cvm-range{
      -webkit-appearance:none; appearance:none;
      width:100%; height:8px; border-radius:999px; outline:0; margin:0;
      background:
        linear-gradient(var(--cvm-primary) 0 0) 0/var(--pct,0%) 100% no-repeat,
        var(--cvm-track);
    }
    .cvm-range::-webkit-slider-runnable-track{height:8px;border-radius:999px;background:transparent}
    .cvm-range::-webkit-slider-thumb{
      -webkit-appearance:none;appearance:none;
      width:18px;height:18px;border-radius:50%;
      background:var(--cvm-primary);border:2px solid #fff;box-shadow:0 0 0 1px rgba(0,0,0,.1);
      margin-top:-5px;cursor:pointer;
    }
    .cvm-range::-moz-range-track{height:8px;border-radius:999px;background:var(--cvm-track)}
    .cvm-range::-moz-range-progress{height:8px;border-radius:999px;background:var(--cvm-primary)}
    .cvm-range::-moz-range-thumb{
      width:18px;height:18px;border:none;border-radius:50%;
      background:var(--cvm-primary);cursor:pointer;
    }
    .cvm-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 4px rgba(10,33,46,.15)}
    .cvm-range:hover::-webkit-slider-thumb{filter:brightness(1.05)}
  </style>

  <div class="cvm-wrap">
    <div class="cvm-title">Buscador Base<span id="cvm-count" class="cvm-badge" style="display:none;margin-left:10px"></span></div>
    <div class="cvm-grid">
      <div class="cvm-card">
        <div style="font-weight:700;margin-bottom:10px"> </div>

        <!-- Label + JD weight inline row ABOVE textarea -->
        <div class="cvm-row" style="margin-bottom:6px;">
          <label for="cvm-jd" class="cvm-label">Descripción del proceso</label>
          <input type="range" class="cvm-range" id="cvm-jd-weight" min="0" max="3" step="0.1" value="1.0" aria-label="Peso de la Descripción (JD)">
          <input class="cvm-input cvm-num" id="cvm-jd-weight-val" type="number" min="0" max="3" step="0.1" value="1.0" aria-label="Peso JD (num)">
        </div>

        <!-- Textarea for JD -->
        <textarea id="cvm-jd" class="cvm-textarea" placeholder="Falta la descripción del proceso"></textarea>

        <div id="cvm-extras">
          <?php for ($i=1;$i<=5;$i++): ?>
            <div class="cvm-label" style="margin-top:10px;">Requisito Importante <?php echo $i; ?></div>
            <div class="cvm-row">
              <input class="cvm-input" id="cvm-extra-text-<?php echo $i; ?>" placeholder="Requisito/Habilidad/Otro (opcional)">
              <input type="range" class="cvm-range" id="cvm-extra-weight-<?php echo $i; ?>" min="0" max="3" step="0.1" value="1.0">
              <input class="cvm-input cvm-num" id="cvm-extra-weight-val-<?php echo $i; ?>" type="number" min="0" max="3" step="0.1" value="1.0">
            </div>
          <?php endfor; ?>
        </div>

        <div class="cvm-label" style="margin-top:12px;">Folder</div>
        <select id="cvm-folder" class="cvm-select"></select>

        <button id="cvm-submit" class="cvm-btn" style="margin-top:12px;">Buscar</button>
      </div>

      <div class="cvm-card">
        <div style="font-weight:700;margin-bottom:10px">Resultados</div>
        <div id="cvm-results"></div>
      </div>
    </div>
  </div>

  <script>
  (function(){
    const byId = (id)=>document.getElementById(id);
    const resultsEl = byId('cvm-results');
    const countEl = byId('cvm-count');
    const folderSel = byId('cvm-folder');

    function setRangeFill(el){
      const min = parseFloat(el.min || '0'), max = parseFloat(el.max || '100');
      const val = parseFloat(el.value || '0');
      const pct = ((val - min) / (max - min)) * 100;
      el.style.setProperty('--pct', pct + '%');
    }

    // sync range + number inputs (JD + 5 extras)
    const syncRange = (rangeId, numId)=>{
      const r = byId(rangeId), n = byId(numId);
      r.addEventListener('input', ()=>{ n.value = r.value; setRangeFill(r); });
      n.addEventListener('input', ()=>{ r.value = n.value; setRangeFill(r); });
      // keep number always wide enough in case of pasted values
      n.addEventListener('change', ()=>{ setRangeFill(r); });
      setRangeFill(r);
    };
    // JD weight
    syncRange('cvm-jd-weight','cvm-jd-weight-val');
    // Extras
    for(let i=1;i<=5;i++){ syncRange('cvm-extra-weight-'+i, 'cvm-extra-weight-val-'+i); }

    // Load folders
    (async function loadFolders(){
      try{
        const res = await fetch('<?php echo esc_url( rest_url('cv/v1/folders') ); ?>');
        const data = await res.json();
        folderSel.innerHTML = '';
        (data || []).forEach(it=>{
          const opt = document.createElement('option');
          opt.value = it.id; opt.textContent = it.label || it.id;
          folderSel.appendChild(opt);
        });
      }catch(e){
        folderSel.innerHTML = '<option value="translated">translated</option>';
      }
    })();

    byId('cvm-submit').addEventListener('click', async function(){
      const jd = byId('cvm-jd').value.trim();
      if(!jd){ resultsEl.innerHTML = '<em>Por favor pegue una descripción del proceso</em>'; return; }

      const jdWeight = parseFloat(byId('cvm-jd-weight').value || '1.0');

      const extras = [];
      for (let i=1;i<=5;i++){
        const txt = byId('cvm-extra-text-'+i).value.trim();
        const w   = parseFloat(byId('cvm-extra-weight-'+i).value || '0');
        if (txt){
          extras.push({ name: 'Requisito Importante '+i, text: txt, weight: w });
        }
      }

      const payload = {
        job_description: jd,
        folder_id: folderSel.value,
        jd_weight: jdWeight,
        top_n: 5,
        include_preview_chars: 0,
        extras
      };

      resultsEl.innerHTML = 'Buscando…';
      try{
        const res = await fetch('<?php echo esc_url( rest_url('cv/v1/match') ); ?>', {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify(payload)
        });
        const data = await res.json();
        if(!res.ok){ throw new Error(data.message || JSON.stringify(data)); }

        countEl.style.display = 'inline-flex';
        countEl.textContent = (data.results_count || 0) + ' Resultado(s)';

        resultsEl.innerHTML = (data.results || []).map(renderItem).join('') || '<em>No matches</em>';
      }catch(err){
        resultsEl.innerHTML = '<strong>Error:</strong> ' + err.message;
      }
    });

    function renderItem(item){
      const chips = (item.parts || []).map(p=>{
        const s = p.similarity?.toFixed ? p.similarity.toFixed(2) : p.similarity;
        return `<span class="cvm-chip">${escapeHtml(p.name)}: ${s}</span>`;
      }).join('');

      const bars = (item.parts || []).map(p=>{
        const pct = Math.max(0, Math.min(100, Math.round((p.similarity || 0) * 100)));
        return `<div style="margin-top:6px">
                  <div style="font-size:12px;margin-bottom:4px">${escapeHtml(p.name)} (w=${p.weight})</div>
                  <div class="cvm-bar"><span style="width:${pct}%"></span></div>
                </div>`;
      }).join('');

      return `<div class="cvm-result">
        <div style="display:flex;justify-content:space-between;gap:10px;align-items:center;">
          <div><strong>${escapeHtml(item.filename)}</strong></div>
          <div class="cvm-score">${Number(item.similarity).toFixed(3)}</div>
        </div>
        <div class="cvm-chips" style="margin-top:6px">${chips}</div>
        <div style="margin-top:8px">${bars}</div>
      </div>`;
    }

    function escapeHtml(str){
      return String(str).replace(/[&<>"'`=\/]/g, s => ({
        '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;','/':'&#x2F;','`':'&#x60;','=':'&#x3D;'
      })[s] || s);
    }
  })();
  </script>
  <?php
  return ob_get_clean();
});
