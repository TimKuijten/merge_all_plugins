<?php
/*
Plugin Name: KVT Board Viewer
Description: Public viewer for Kovacic Pipeline boards via /view-board/<slug> URLs.
Version: 1.0.0
Author: Kovacic Executive Talent Research
*/

if (!defined('ABSPATH')) exit;

class KVT_Board_Viewer {
    public function __construct() {
        add_action('init', [$this, 'add_rewrite']);
        add_action('template_redirect', [$this, 'render_board']);
        register_activation_hook(__FILE__, [$this, 'flush']);
        register_deactivation_hook(__FILE__, [$this, 'flush']);
    }

    public function add_rewrite() {
        add_rewrite_rule('^view-board/([^/]+)/?$', 'index.php?kvt_board=$matches[1]', 'top');
        add_filter('query_vars', function($vars){
            $vars[] = 'kvt_board';
            return $vars;
        });
    }

    public function render_board() {
        $slug = get_query_var('kvt_board');
        if (!$slug) return;
        status_header(200);
        nocache_headers();
        echo '<!DOCTYPE html><html><head><meta charset="utf-8">';
        wp_head();
        if ($slug === 'analytics') {
            echo '</head><body>';
            $from = isset($_GET['from']) ? sanitize_text_field($_GET['from']) : '';
            $to = isset($_GET['to']) ? sanitize_text_field($_GET['to']) : '';
            $process = isset($_GET['process']) ? intval($_GET['process']) : 0;
            $recruiter = isset($_GET['recruiter']) ? intval($_GET['recruiter']) : 0;
            $args = [
                'post_type'   => Kovacic_Pipeline_Visualizer::CPT,
                'post_status' => 'any',
                'numberposts' => -1,
            ];
            if ($from || $to) {
                $date_query = [];
                if ($from) $date_query['after'] = $from;
                if ($to)   $date_query['before'] = $to;
                $args['date_query'] = [$date_query];
            }
            $tax_query = [];
            if ($process) {
                $tax_query[] = [
                    'taxonomy' => Kovacic_Pipeline_Visualizer::TAX_PROCESS,
                    'field'    => 'term_id',
                    'terms'    => $process,
                ];
            }
            if ($tax_query) $args['tax_query'] = $tax_query;
            if ($recruiter) $args['author'] = $recruiter;
            $posts = get_posts($args);
            $by_status = [];
            $hire_times = [];
            $by_source = [];
            foreach ($posts as $p) {
                $status = get_post_meta($p->ID, 'kvt_status', true);
                if (!$status) $status = 'Desconocido';
                $by_status[$status] = ($by_status[$status] ?? 0) + 1;
                $source = get_post_meta($p->ID, 'source', true);
                if ($source) $by_source[$source] = ($by_source[$source] ?? 0) + 1;
                if ($status === 'Contratado') {
                    $created = strtotime($p->post_date_gmt ? $p->post_date_gmt : $p->post_date);
                    $hired   = strtotime(get_post_meta($p->ID, 'kvt_hired_date', true));
                    if ($created && $hired) $hire_times[] = ($hired - $created) / DAY_IN_SECONDS;
                }
            }
            $avg_time  = $hire_times ? array_sum($hire_times) / count($hire_times) : 0;
            $processes = get_terms(['taxonomy' => Kovacic_Pipeline_Visualizer::TAX_PROCESS, 'hide_empty' => false]);
            $users     = get_users();
            ?>
            <div class="wrap">
            <h1><?php esc_html_e('Analytics','kovacic'); ?></h1>
            <form method="get">
                <input type="hidden" name="kvt_board" value="analytics">
                <label><?php esc_html_e('Desde','kovacic'); ?> <input type="date" name="from" value="<?php echo esc_attr($from); ?>"></label>
                <label><?php esc_html_e('Hasta','kovacic'); ?> <input type="date" name="to" value="<?php echo esc_attr($to); ?>"></label>
                <label><?php esc_html_e('Proceso','kovacic'); ?>
                    <select name="process">
                        <option value="0">—</option>
                        <?php foreach ($processes as $pr): ?>
                        <option value="<?php echo esc_attr($pr->term_id); ?>" <?php selected($process, $pr->term_id); ?>><?php echo esc_html($pr->name); ?></option>
                        <?php endforeach; ?>
                    </select>
                </label>
                <label><?php esc_html_e('Recruiter','kovacic'); ?>
                    <select name="recruiter">
                        <option value="0">—</option>
                        <?php foreach ($users as $u): ?>
                        <option value="<?php echo esc_attr($u->ID); ?>" <?php selected($recruiter, $u->ID); ?>><?php echo esc_html($u->display_name); ?></option>
                        <?php endforeach; ?>
                    </select>
                </label>
                <?php submit_button(__('Filtrar','kovacic'), 'secondary', '', false); ?>
            </form>
            <p><?php printf(__('Tiempo medio de contratación: %s días', 'kovacic'), number_format_i18n($avg_time, 2)); ?></p>
            <canvas id="kvt_analytics_status" width="400" height="200"></canvas>
            <canvas id="kvt_analytics_source" width="400" height="200"></canvas>
            </div>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script>
            document.addEventListener('DOMContentLoaded',function(){
              const ctx=document.getElementById('kvt_analytics_status').getContext('2d');
              new Chart(ctx,{
                type:'bar',
                data:{
                  labels: <?php echo wp_json_encode(array_keys($by_status)); ?>,
                  datasets:[{label:'Candidatos',data:<?php echo wp_json_encode(array_values($by_status)); ?>,backgroundColor:'rgba(54,162,235,0.5)'}]
                },
                options:{responsive:true}
              });
              const ctx2=document.getElementById('kvt_analytics_source').getContext('2d');
              new Chart(ctx2,{
                type:'pie',
                data:{
                  labels: <?php echo wp_json_encode(array_keys($by_source)); ?>,
                  datasets:[{data:<?php echo wp_json_encode(array_values($by_source)); ?>,backgroundColor:['#60a5fa','#34d399','#f87171','#a78bfa','#fbbf24']}]
                },
                options:{responsive:true}
              });
            });
            </script>
            <?php
            wp_footer();
            echo '</body></html>';
            exit;
        }
        echo '<style>.kvt-nav,.kvt-header,.kvt-help,#kvt_board_wrap,#kvt_toggle_kanban,#kvt_filters_bar,#kvt_ats_bar,#kvt_board_base,#kvt_stage_overview,#k-toggle-activity,.k-sideactions,#kvt_calendar_wrap,.kvt-widgets{display:none!important;}#k-sidebar{display:none;width:100%!important;margin-top:20px;}.kvt-wrapper{display:block!important;width:100%!important;max-width:none!important;margin:0!important;}.kvt-content{width:100%!important;padding:0!important;}.kvt-main{display:block!important;}#kvt_table_wrap{display:block!important;flex:1 1 100%!important;width:100%!important;overflow:visible!important;}.kvt-table-wrap{overflow:visible!important;max-height:none!important;}body{overflow-x:hidden!important;}</style>';
        echo '</head><body>';
        echo do_shortcode('[kvt_pipeline]');
        wp_footer();
        echo '<script>document.addEventListener("DOMContentLoaded",function(){var b=document.getElementById("kvt_board_wrap");if(b)b.style.display="none";var t=document.getElementById("kvt_table_wrap");if(t)t.style.display="block";var n=document.querySelector(".kvt-nav");if(n)n.style.display="none";var h=document.querySelector(".kvt-header");if(h)h.style.display="none";var hl=document.querySelector(".kvt-help");if(hl)hl.style.display="none";var tk=document.getElementById("kvt_toggle_kanban");if(tk)tk.style.display="none";var fb=document.getElementById("kvt_filters_bar");if(fb)fb.style.display="none";var ab=document.getElementById("kvt_ats_bar");if(ab)ab.style.display="none";var bb=document.getElementById("kvt_board_base");if(bb)bb.style.display="none";var so=document.getElementById("kvt_stage_overview");if(so)so.style.display="none";var log=document.getElementById("kvt_activity")||document.getElementById("k-sidebar");if(log)log.style.display="none";var head=log?log.querySelector(".kvt-widget-title")||log.querySelector(".k-sidehead"):null;if(head)head.textContent="History";var tabs=log?log.querySelector(".kvt-activity-tabs"):null;if(tabs)tabs.style.display="none";var tasks=document.getElementById("kvt_activity_tasks");if(tasks)tasks.style.display="none";var logPane=document.getElementById("kvt_activity_log");if(logPane)logPane.style.display="block";var sideActions=log?log.querySelector(".k-sideactions"):null;if(sideActions)sideActions.style.display="none";var pager=document.getElementById("kvt_table_pager")||document.querySelector(".k-pager");if(pager){var btn=document.createElement("button");btn.id="k-show-log";btn.textContent="History";btn.className="kvt-btn btn";btn.style.display="block";btn.style.marginTop="20px";pager.insertAdjacentElement("afterend",btn);if(log)btn.insertAdjacentElement("afterend",log);btn.addEventListener("click",function(){if(log){log.style.display=log.style.display==="none"?"block":"none";}});}});</script>';
        echo '</body></html>';
        exit;
    }

    public function flush() {
        flush_rewrite_rules();
    }
}

new KVT_Board_Viewer();
